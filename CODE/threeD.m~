function tf = threeD(r,N_object,method)
%If no variables use this
if nargin==0
    method=1; N_object = 1; r=1;
end

% Define the starting position
boundary = 5;       p.x = randi(boundary,1);
p.y = randi(boundary,1);        p.z = randi(boundary,1);
p.ang = 0;          p.n = 0;

for i = 1:N_object
    object.x(i) = randi([ceil(r).*boundary,floor(boundary-r).*boundary],1,1)./boundary;
    object.y(i) = randi([ceil(r).*boundary,floor(boundary-r).*boundary],1,1)./boundary;
    object.z(i) = randi([ceil(r).*boundary,floor(boundary-r).*boundary],1,1)./boundary;
    object.r(i) = r;
end

%Predfine the variables
ss = 0.1;       t_step = 1;     n_steps = 100000;       found = 0;      tf = n_steps;



for i = 1:t_step:n_steps
    ix = p.x;
    iy = p.y;
    iz = p.z;
    if i==1
        start=[p.x p.y p.z];
    end
    % Something sams doing
    locstorex(i)=p.x;
    locstorey(i)=p.y;
    % Use the chosen method to determine new position
    p = threeSearch(p,ss,object,boundary,i);
    % Check it hasent passed the boundarys
    p = boundarys(p,boundary);
    [found,object] = o_goal(p,object,found);
    if found==N_object || i==n_steps;
        tf = (i);
        figure
        axes('XLim',[0 boundary],'YLim',[0 boundary],'ZLim',[0 boundary]);
        plot3(pstorex,pstorey,pstorez,'bx');
        for i=1:N_object
        [x,y,z] = (sphere.*r);
        surf(object.x(i)+x,object.y(i)+y,object.z(i)+z)
        end
        grid on;
        return
    end
    pstorex(i) = p.x;
    pstorey(i) = p.y;
    pstorez(i) = p.z;
end
plot3(pstorex,pstorey,pstorez)
end
function [found,object] = o_goal(p,object,found)
for i = 1:length(object.x)
    if (abs(p.x-object.x(i))<object.r(i))&&(abs(p.y-object.y(i))<object.r(i))&&(abs(p.z-object.z(i))<object.r(i))
        found = found+ 1;
        object.x(i) = NaN;
        object.y(i) = NaN;
        object.z(i) = NaN;
    else
        found = found+0;
    end
end
end
function p = boundarys(p,boundary)
if p.x>boundary
    p.x = p.x-boundary;
end
if p.y > boundary
    p.y = p.y-boundary;
end
if p.x<0
    p.x = p.x+boundary;
end
if p.y<0
    p.y = p.y+boundary;
end
if p.z>boundary
    p.z = p.z-boundary;
end
if p.z < 0
    p.z = p.z + boundary;
end
end